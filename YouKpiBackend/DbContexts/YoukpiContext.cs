// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using YouKpiBackend.ModelsEntity;

namespace YouKpiBackend.DbContexts
{
    public partial class YoukpiContext : DbContext
    {
        public YoukpiContext()
        {
        }

        public YoukpiContext(DbContextOptions<YoukpiContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BusiessArea> BusiessArea { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Czesci> Czesci { get; set; }
        public virtual DbSet<MozliweStatusyOferty> MozliweStatusyOferty { get; set; }
        public virtual DbSet<MozliwyDn> MozliwyDn { get; set; }
        public virtual DbSet<MozliwyOrderType> MozliwyOrderType { get; set; }
        public virtual DbSet<MożliwaGrupaProcesu> MożliwaGrupaProcesu { get; set; }
        public virtual DbSet<OfertaTyp> OfertaTyp { get; set; }
        public virtual DbSet<OfertyView> OfertyView { get; set; }
        public virtual DbSet<Offer> Offer { get; set; }
        public virtual DbSet<OfferLines> OfferLines { get; set; }
        public virtual DbSet<Pracownik> Pracownik { get; set; }
        public virtual DbSet<PracownikOfertaProcesy> PracownikOfertaProcesy { get; set; }
        public virtual DbSet<PracownikProcess> PracownikProcess { get; set; }
        public virtual DbSet<Process> Process { get; set; }
        public virtual DbSet<ProduktCzesci> ProduktCzesci { get; set; }
        public virtual DbSet<Produkty> Produkty { get; set; }
        public virtual DbSet<ProduktyOld> ProduktyOld { get; set; }
        public virtual DbSet<Projects> Projects { get; set; }
        public virtual DbSet<Steps> Steps { get; set; }
        public virtual DbSet<TypWyrobu> TypWyrobu { get; set; }
        public virtual DbSet<TypWyrobuIdDn> TypWyrobuIdDn { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BusiessArea>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Nip)
                    .IsRequired()
                    .HasColumnName("NIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Czesci>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GatPodstawowy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nazwa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumerRysNorma)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Wymiary).HasMaxLength(50);
            });

            modelBuilder.Entity<MozliweStatusyOferty>(entity =>
            {
                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MozliwyDn>(entity =>
            {
                entity.HasKey(e => e.Dn);

                entity.ToTable("MozliwyDN");

                entity.Property(e => e.Dn)
                    .HasColumnName("DN")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<MozliwyOrderType>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.OrderType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MożliwaGrupaProcesu>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfertaTyp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.OfferId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<OfertyView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OfertyView");

                entity.Property(e => e.Currency).HasMaxLength(4);

                entity.Property(e => e.DataOferty).HasColumnType("datetime");

                entity.Property(e => e.DataZamowienia).HasColumnType("datetime");

                entity.Property(e => e.DataZapytania).HasColumnType("datetime");

                entity.Property(e => e.Dn).HasColumnName("DN");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdentyfikatorProcesu).HasMaxLength(50);

                entity.Property(e => e.IdentyfikatorProjektu).HasMaxLength(50);

                entity.Property(e => e.Idoferty)
                    .IsRequired()
                    .HasColumnName("IDOferty")
                    .HasMaxLength(50);

                entity.Property(e => e.Idwyrobu)
                    .HasColumnName("IDWyrobu")
                    .HasMaxLength(50);

                entity.Property(e => e.Medium).HasMaxLength(150);

                entity.Property(e => e.NazwaKlienta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NazwaKroku)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Nip)
                    .HasColumnName("NIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ofertujacy).HasMaxLength(50);

                entity.Property(e => e.PlanowanaDataKoncowa).HasColumnType("datetime");

                entity.Property(e => e.Pn).HasColumnName("PN");

                entity.Property(e => e.PricePerPiece).HasMaxLength(50);

                entity.Property(e => e.Sale).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TempMax).HasMaxLength(50);

                entity.Property(e => e.TempMin).HasMaxLength(50);

                entity.Property(e => e.TypKonstrukcji)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypPrzelotu)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypWyrobu)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TypZlecienia)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Uszczelnienie).HasMaxLength(20);

                entity.Property(e => e.W).HasMaxLength(50);

                entity.Property(e => e.Zamowienie).HasMaxLength(50);
            });

            modelBuilder.Entity<Offer>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ClientsId).HasMaxLength(50);

                entity.Property(e => e.OfferDate).HasColumnType("datetime");

                entity.Property(e => e.Offerrer).HasMaxLength(50);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PlannedEnd).HasColumnType("datetime");

                entity.Property(e => e.ProjectsId).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<OfferLines>(entity =>
            {
                entity.HasIndex(e => e.Id)
                    .HasName("IX_OfferLines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Currency).HasMaxLength(4);

                entity.Property(e => e.Medium).HasMaxLength(150);

                entity.Property(e => e.OfferId)
                    .IsRequired()
                    .HasColumnName("OfferID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PricePerPiece).HasMaxLength(50);

                entity.Property(e => e.ProductId)
                    .HasColumnName("ProductID")
                    .HasMaxLength(50);

                entity.Property(e => e.Sale).HasMaxLength(50);

                entity.Property(e => e.StepId).HasColumnName("StepID");

                entity.Property(e => e.TempMax).HasMaxLength(50);

                entity.Property(e => e.TempMin).HasMaxLength(50);

                entity.Property(e => e.W).HasMaxLength(50);
            });

            modelBuilder.Entity<Pracownik>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Salt).HasMaxLength(20);
            });

            modelBuilder.Entity<PracownikOfertaProcesy>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.OfferId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessId)
                    .HasColumnName("ProcessID")
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<PracownikProcess>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.ProcessId)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Pracownik)
                    .WithMany()
                    .HasForeignKey(d => d.PracownikId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PracownikProcess_Pracownik");
            });

            modelBuilder.Entity<Process>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(30);

                entity.Property(e => e.BusinessArea)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.KontoGłówne).HasMaxLength(50);

                entity.Property(e => e.NazwaGrupyProcesu)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NazwaProcesu)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.TypZlecenia)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('R')");
            });

            modelBuilder.Entity<ProduktCzesci>(entity =>
            {
                entity.Property(e => e.CzesciId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProduktyId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.Czesci)
                    .WithMany(p => p.ProduktCzesci)
                    .HasForeignKey(d => d.CzesciId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProduktCzesci_Czesci_FK");

                entity.HasOne(d => d.Produkty)
                    .WithMany(p => p.ProduktCzesci)
                    .HasForeignKey(d => d.ProduktyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProduktCzesci_Produkty_FK");
            });

            modelBuilder.Entity<Produkty>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ansi)
                    .IsRequired()
                    .HasColumnName("ANSI")
                    .HasMaxLength(5);

                entity.Property(e => e.Dn).HasColumnName("DN");

                entity.Property(e => e.NumerRysNorma)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Pn).HasColumnName("PN");

                entity.Property(e => e.TypWyrobuId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Uszczelnienie)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Wersja)
                    .IsRequired()
                    .HasMaxLength(5);
            });

            modelBuilder.Entity<ProduktyOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Produkty_old");

                entity.Property(e => e.Ansi)
                    .IsRequired()
                    .HasColumnName("ANSI")
                    .HasMaxLength(5);

                entity.Property(e => e.Dn).HasColumnName("DN");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumerRysNorma)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Pn).HasColumnName("PN");

                entity.Property(e => e.TypWyrobuId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Uszczelnienie)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Waga).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WagaJednostka)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'kg')");

                entity.Property(e => e.Wersja)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.WymiaryDlmm).HasColumnName("WymiaryDLmm");
            });

            modelBuilder.Entity<Projects>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Client).HasMaxLength(5);

                entity.Property(e => e.ClientGroup).HasMaxLength(50);

                entity.Property(e => e.DateOfferd).HasMaxLength(50);

                entity.Property(e => e.DateTd)
                    .HasColumnName("DateTD")
                    .HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Funel).HasMaxLength(40);

                entity.Property(e => e.FunelStep).HasMaxLength(255);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Location).HasMaxLength(10);

                entity.Property(e => e.Nomination).HasMaxLength(8);

                entity.Property(e => e.Phase).HasMaxLength(10);

                entity.Property(e => e.ProductNrClient).HasMaxLength(100);

                entity.Property(e => e.ProductNrInt).HasMaxLength(20);

                entity.Property(e => e.ProductSubType).HasMaxLength(50);

                entity.Property(e => e.ProductType).HasMaxLength(50);

                entity.Property(e => e.QafNr).HasMaxLength(255);

                entity.Property(e => e.RodzajProjektu).HasMaxLength(10);

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.To).HasMaxLength(25);

                entity.Property(e => e.Version).HasMaxLength(10);
            });

            modelBuilder.Entity<Steps>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProcessesId)
                    .IsRequired()
                    .HasColumnName("ProcessesID")
                    .HasMaxLength(50);

                entity.Property(e => e.Sekwencja).HasDefaultValueSql("((1))");

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.StepNum)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<TypWyrobu>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.IdgrupyWyrobu)
                    .IsRequired()
                    .HasColumnName("IDGrupyWyrobu")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypKonstrukcji)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypKuli)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('pływajaca')");

                entity.Property(e => e.TypPrzelotu)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TypWyrobuIdDn>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Dn).HasColumnName("DN");

                entity.Property(e => e.TempMax).HasDefaultValueSql("((120))");

                entity.Property(e => e.TempMin).HasDefaultValueSql("((-60))");

                entity.Property(e => e.TypWyrobuId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Waga).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WagaJednostka)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WymiaryDlmm).HasColumnName("WymiaryDLmm");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}