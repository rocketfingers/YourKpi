// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YouKpiBackend.DbContexts;

namespace YouKpiBackend.Migrations
{
    [DbContext(typeof(YoukpiContext))]
    [Migration("20210918172644_RozbudowaRysunkow")]
    partial class RozbudowaRysunkow
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.BusiessArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.ToTable("BusiessArea");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("KodPocztowy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Miasto")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("NIP")
                        .IsFixedLength(true);

                    b.Property<string>("NrBudynku")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("NrTelefonu")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("OsobaKontaktowa")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Ulica")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.CompanyBasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("FormaPrawna")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("KodPocztowy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Miasto")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Nip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NIP");

                    b.Property<string>("Numer")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ulica")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CompanyBasicInfo");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Czesci", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CzasProgramisty")
                        .HasColumnType("int");

                    b.Property<string>("GatPodstawowy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("KomponentId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumerProgramu")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("NumerRysNorma")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("Tj")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("TJ");

                    b.Property<decimal?>("Tpz")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("TPZ");

                    b.Property<string>("Wykonanie")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Wymiary")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("KomponentId");

                    b.ToTable("Czesci");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Komponenty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<decimal?>("CenaJednostkowa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GatunekPodst")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<decimal?>("Ilosc")
                        .HasColumnType("decimal(11,6)");

                    b.Property<string>("Jednostka")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("KomponentId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Ltid")
                        .HasColumnType("int")
                        .HasColumnName("LTID");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ProcessId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Wymiar")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Komponenty");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Kontrahent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("KodPocztowy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Miasto")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("NIP")
                        .IsFixedLength(true);

                    b.Property<string>("NrBudynku")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("NrTelefonu")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Ulica")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Kontrahent");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Lokacja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nazwa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Lokacja");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynCzesci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("CenaJdnNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DataPrzyjecia")
                        .HasColumnType("datetime");

                    b.Property<string>("ElementId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Ilosc")
                        .HasColumnType("int");

                    b.Property<string>("Jednostka")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("KontrahentId")
                        .HasColumnType("int");

                    b.Property<int?>("LokacjaId")
                        .HasColumnType("int");

                    b.Property<string>("NrFakturyId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("KontrahentId");

                    b.HasIndex("LokacjaId");

                    b.ToTable("MagazynCzesci");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynKomponenty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("CenaJdnNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DataPrzyjecia")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElementId")
                        .HasColumnType("int");

                    b.Property<int?>("Ilosc")
                        .HasColumnType("int");

                    b.Property<string>("Jednostka")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("KontrahentId")
                        .HasColumnType("int");

                    b.Property<int?>("LokacjaId")
                        .HasColumnType("int");

                    b.Property<string>("NrFakturyId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("KontrahentId");

                    b.HasIndex("LokacjaId");

                    b.ToTable("MagazynKomponenty");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynProdukty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("CenaJdnNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DataPrzyjecia")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElementId")
                        .HasColumnType("int");

                    b.Property<int?>("Ilosc")
                        .HasColumnType("int");

                    b.Property<string>("Jednostka")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("KontrahentId")
                        .HasColumnType("int");

                    b.Property<int?>("LokacjaId")
                        .HasColumnType("int");

                    b.Property<string>("NrFakturyId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("KontrahentId");

                    b.HasIndex("LokacjaId");

                    b.ToTable("MagazynProdukty");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynProduktyNiezgodne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("CenaJdnNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DataPrzyjecia")
                        .HasColumnType("datetime");

                    b.Property<int?>("ElementId")
                        .HasColumnType("int");

                    b.Property<int?>("Ilosc")
                        .HasColumnType("int");

                    b.Property<string>("Jednostka")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("KontrahentId")
                        .HasColumnType("int");

                    b.Property<int?>("LokacjaId")
                        .HasColumnType("int");

                    b.Property<string>("NrFakturyId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("KontrahentId");

                    b.HasIndex("LokacjaId");

                    b.ToTable("MagazynProduktyNiezgodne");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynTowary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("CenaJdnNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DataPrzyjecia")
                        .HasColumnType("datetime");

                    b.Property<string>("ElementId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Ilosc")
                        .HasColumnType("int");

                    b.Property<string>("Jednostka")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("KontrahentId")
                        .HasColumnType("int");

                    b.Property<int?>("LokacjaId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NrFakturyId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("KontrahentId");

                    b.HasIndex("LokacjaId");

                    b.ToTable("MagazynTowary");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Maszyny", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("DataUruchomienia")
                        .HasColumnType("datetime");

                    b.Property<string>("Krytycznosc")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("MiejscePracy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Opis")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("OsX")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("OsY")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("OsZ")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Rodzaj")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("StawkaMiesieczna")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrybPracy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("WartoscMaszyny")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Maszyny");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MozliweStatusyOferty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("MozliweStatusyOferty");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MozliwyDn", b =>
                {
                    b.Property<int>("Dn")
                        .HasColumnType("int")
                        .HasColumnName("DN");

                    b.HasKey("Dn");

                    b.ToTable("MozliwyDN");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MozliwyOrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.ToTable("MozliwyOrderType");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MożliwaGrupaProcesu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.ToTable("MożliwaGrupaProcesu");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.NlogAllErrors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Application")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Callsite")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Exception")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Ip")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Level")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Logged")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("User")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("NLogAllErrors", "log");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.NlogAsp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Application")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Ip")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Level")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Logged")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Url")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("User")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("NLogAsp", "log");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.NlogOwn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Application")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Callsite")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Ip")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Level")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Logged")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("User")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("NLogOwn", "log");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("OfferDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Offerrer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PlannedEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("ProjectsId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientsId");

                    b.HasIndex("Offerrer");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.OfferLineProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OfferLineId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("OfferLineId");

                    b.HasIndex("ProcessId");

                    b.ToTable("OfferLineProcess");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.OfferLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdditionalEquipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PriceInOfferDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("W")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("ProductId");

                    b.ToTable("OfferLines");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.OfferProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double?>("CzasWymagany")
                        .HasColumnType("float");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("ProcessId");

                    b.ToTable("OfferProcess");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Pracownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CzasDostepuMin")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("Rola")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Salt")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("StawkaGodzinowa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("StawkaMiesieczna")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TrybPracy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pracownik");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.PracownikCzasStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CzasStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CzasStop")
                        .HasColumnType("datetime");

                    b.Property<string>("CzescId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CześćIlosc")
                        .HasColumnType("int");

                    b.Property<int>("LiczbaMinut")
                        .HasColumnType("int");

                    b.Property<string>("MaszynyId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OfferLinesId")
                        .HasColumnType("int")
                        .HasColumnName("OfferLinesID");

                    b.Property<int>("PracownikId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CzescId");

                    b.HasIndex("MaszynyId");

                    b.HasIndex("OfferLinesId");

                    b.HasIndex("PracownikId");

                    b.HasIndex("ProcessId");

                    b.ToTable("PracownikCzasStep");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.PracownikProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PracownikId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("PracownikId");

                    b.ToTable("PracownikProcess");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Process", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BusinessArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KontoGłówne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwaGrupyProcesu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwaProcesu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypZlecenia")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('R')")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Process");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ProcessesProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ProcessId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RelatedProcessId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RelatedProcessId");

                    b.ToTable("ProcessesProcess");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ProduktCzesci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CzesciId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("IloscSztuk")
                        .HasColumnType("int");

                    b.Property<int?>("ProduktId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CzesciId");

                    b.HasIndex("ProduktId");

                    b.ToTable("ProduktCzesci");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Produkty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Ansi")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("ANSI");

                    b.Property<decimal?>("Cena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Dn")
                        .HasColumnType("int")
                        .HasColumnName("DN");

                    b.Property<string>("NumerRysNorma")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Pn")
                        .HasColumnType("int")
                        .HasColumnName("PN");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TypWyrobuId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Uszczelnienie")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Waluta")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Wersja")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Produkty");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ProduktyRysunki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Base64FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Rozszerzenie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProduktyRysunki");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ProduktyRysunkiInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DataDodania")
                        .HasColumnType("datetime2");

                    b.Property<int>("DodanoPrzezId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProduktId")
                        .HasColumnType("int");

                    b.Property<int?>("ProduktyRysunkiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProduktId");

                    b.HasIndex("ProduktyRysunkiId")
                        .IsUnique()
                        .HasFilter("[ProduktyRysunkiId] IS NOT NULL");

                    b.ToTable("ProduktyRysunkiInfo");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Projects", b =>
                {
                    b.Property<string>("Client")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ClientGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DateOfferd")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DateTd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DateTD");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Funel")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FunelStep")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ID");

                    b.Property<string>("Location")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nomination")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Phase")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProductNrClient")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductNrInt")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductSubType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QafNr")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RodzajProjektu")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("To")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Version")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ReasonCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("IdDifferenceReasonCode")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ReasonCodes");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.StepOfferWykonanie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ClosesBy")
                        .HasColumnType("int");

                    b.Property<int>("LiczbaPomiarow")
                        .HasColumnType("int");

                    b.Property<int>("LiczbaPomiarowNok")
                        .HasColumnType("int");

                    b.Property<int>("OfferLineId")
                        .HasColumnType("int")
                        .HasColumnName("OfferLineID");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ProcessID");

                    b.Property<int?>("ReasonCodeId")
                        .HasColumnType("int")
                        .HasColumnName("ReasonCodeID");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<bool>("Zakonczonie")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ReasonCodeId");

                    b.ToTable("StepOfferWykonanie");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Steps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ProcessesId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Sekwencja")
                        .HasColumnType("int");

                    b.Property<string>("StepId")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StepNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessesId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.StepsMachines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("MachineId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("StepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("StepId");

                    b.ToTable("StepsMachines");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Towary", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ID");

                    b.Property<decimal?>("CenaSprzedazy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CenaZakupu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("WalutaSprzedazy")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("WalutaZakupu")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Towary");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.TypWyrobu", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("IdgrupyWyrobu")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("IDGrupyWyrobu");

                    b.Property<string>("TypKonstrukcji")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TypKuli")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("('pływajaca')");

                    b.Property<string>("TypPrzelotu")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("TypWyrobu");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.TypWyrobuIdDn", b =>
                {
                    b.Property<string>("TypWyrobuId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Dn")
                        .HasColumnType("int")
                        .HasColumnName("DN");

                    b.Property<int>("Kvs")
                        .HasColumnType("int");

                    b.Property<int>("TempMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((120))");

                    b.Property<int>("TempMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-60))");

                    b.Property<decimal>("Waga")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WagaJednostka")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WymianyRmm")
                        .HasColumnType("int");

                    b.Property<int>("WymiarHmm")
                        .HasColumnType("int");

                    b.Property<int>("WymiaryDlmm")
                        .HasColumnType("int")
                        .HasColumnName("WymiaryDLmm");

                    b.HasKey("TypWyrobuId");

                    b.ToTable("TypWyrobuIdDn");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.VActivityHistory", b =>
                {
                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CzasStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CzasStop")
                        .HasColumnType("datetime");

                    b.Property<int>("IloscCzesci")
                        .HasColumnType("int");

                    b.Property<string>("PartId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PartName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PracownikId")
                        .HasColumnType("int");

                    b.Property<string>("PracownikName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WyrobId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToView("vActivityHistory");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.VOtifReport", b =>
                {
                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("NazwaGrupyProcesu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NazwaProcesu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("PlannedEndOffer")
                        .HasColumnType("datetime")
                        .HasColumnName("plannedEndOffer");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Sekwencja")
                        .HasColumnType("int");

                    b.Property<int>("StepNum")
                        .HasColumnType("int");

                    b.Property<int?>("StepShouldEndBeforeDays")
                        .HasColumnType("int")
                        .HasColumnName("stepShouldEndBeforeDays");

                    b.ToView("vOtifReport");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.VProdExe", b =>
                {
                    b.Property<int>("CzasSpedzony")
                        .HasColumnType("int");

                    b.Property<int?>("Dn")
                        .HasColumnType("int")
                        .HasColumnName("DN");

                    b.Property<string>("Id")
                        .HasMaxLength(81)
                        .HasColumnType("nvarchar(81)")
                        .HasColumnName("id");

                    b.Property<string>("IdentyfikatorWyrobu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentyfikatorZamowienia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IloscStepow")
                        .HasColumnType("int");

                    b.Property<int?>("IloscWyrobow")
                        .HasColumnType("int");

                    b.Property<string>("Klient")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NazwaProcesu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NumerKlienta")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength(true);

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("OfferLineId")
                        .HasColumnType("int")
                        .HasColumnName("OfferLineID");

                    b.Property<DateTime?>("PlannedEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("processId");

                    b.Property<string>("TypProcesu")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("typProcesu");

                    b.Property<string>("TypWyrobu")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Wersja")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("wersja");

                    b.Property<long?>("WierszOferty")
                        .HasColumnType("bigint");

                    b.Property<int?>("WykonaneStepy")
                        .HasColumnType("int");

                    b.Property<int?>("Wynik")
                        .HasColumnType("int");

                    b.Property<DateTime>("ZakonczenieData")
                        .HasColumnType("datetime");

                    b.ToView("VProdExe");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Czesci", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Komponenty", "Komponent")
                        .WithMany("Czesci")
                        .HasForeignKey("KomponentId")
                        .HasConstraintName("FK__Czesci__Komponen__79C80F94");

                    b.Navigation("Komponent");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynCzesci", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Czesci", "Element")
                        .WithMany("MagazynCzesci")
                        .HasForeignKey("ElementId")
                        .HasConstraintName("FK_Czesci");

                    b.HasOne("YouKpiBackend.ModelsEntity.Kontrahent", "Kontrahent")
                        .WithMany("MagazynCzesci")
                        .HasForeignKey("KontrahentId")
                        .HasConstraintName("FK_Kontrahent");

                    b.HasOne("YouKpiBackend.ModelsEntity.Lokacja", "Lokacja")
                        .WithMany("MagazynCzesci")
                        .HasForeignKey("LokacjaId")
                        .HasConstraintName("FK_Lokacje");

                    b.Navigation("Element");

                    b.Navigation("Kontrahent");

                    b.Navigation("Lokacja");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynKomponenty", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Komponenty", "Element")
                        .WithMany("MagazynKomponenty")
                        .HasForeignKey("ElementId")
                        .HasConstraintName("FK_Komponenty");

                    b.HasOne("YouKpiBackend.ModelsEntity.Kontrahent", "Kontrahent")
                        .WithMany("MagazynKomponenty")
                        .HasForeignKey("KontrahentId")
                        .HasConstraintName("FK_KontrahentKomponenty");

                    b.HasOne("YouKpiBackend.ModelsEntity.Lokacja", "Lokacja")
                        .WithMany("MagazynKomponenty")
                        .HasForeignKey("LokacjaId")
                        .HasConstraintName("FK_LokacjePKomponenty");

                    b.Navigation("Element");

                    b.Navigation("Kontrahent");

                    b.Navigation("Lokacja");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynProdukty", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Produkty", "Element")
                        .WithMany("MagazynProdukty")
                        .HasForeignKey("ElementId")
                        .HasConstraintName("FK_Produkty");

                    b.HasOne("YouKpiBackend.ModelsEntity.Kontrahent", "Kontrahent")
                        .WithMany("MagazynProdukty")
                        .HasForeignKey("KontrahentId")
                        .HasConstraintName("FK_KontrahentProdukty");

                    b.HasOne("YouKpiBackend.ModelsEntity.Lokacja", "Lokacja")
                        .WithMany("MagazynProdukty")
                        .HasForeignKey("LokacjaId")
                        .HasConstraintName("FK_LokacjeProdukty");

                    b.Navigation("Element");

                    b.Navigation("Kontrahent");

                    b.Navigation("Lokacja");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynProduktyNiezgodne", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Produkty", "Element")
                        .WithMany("MagazynProduktyNiezgodne")
                        .HasForeignKey("ElementId")
                        .HasConstraintName("FK_ProduktyNiezgodne");

                    b.HasOne("YouKpiBackend.ModelsEntity.Kontrahent", "Kontrahent")
                        .WithMany("MagazynProduktyNiezgodne")
                        .HasForeignKey("KontrahentId")
                        .HasConstraintName("FK_KontrahentProduktyNiezgodne");

                    b.HasOne("YouKpiBackend.ModelsEntity.Lokacja", "Lokacja")
                        .WithMany("MagazynProduktyNiezgodne")
                        .HasForeignKey("LokacjaId")
                        .HasConstraintName("FK_LokacjeProduktyNiezgodne");

                    b.Navigation("Element");

                    b.Navigation("Kontrahent");

                    b.Navigation("Lokacja");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.MagazynTowary", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Towary", "Element")
                        .WithMany("MagazynTowary")
                        .HasForeignKey("ElementId")
                        .HasConstraintName("FK__MagazynTo__Eleme__23BE4960");

                    b.HasOne("YouKpiBackend.ModelsEntity.Kontrahent", "Kontrahent")
                        .WithMany("MagazynTowary")
                        .HasForeignKey("KontrahentId")
                        .HasConstraintName("FK__MagazynTo__Kontr__24B26D99");

                    b.HasOne("YouKpiBackend.ModelsEntity.Lokacja", "Lokacja")
                        .WithMany("MagazynTowary")
                        .HasForeignKey("LokacjaId")
                        .HasConstraintName("FK__MagazynTo__Lokac__25A691D2");

                    b.Navigation("Element");

                    b.Navigation("Kontrahent");

                    b.Navigation("Lokacja");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Offer", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Client", "Clients")
                        .WithMany("Offer")
                        .HasForeignKey("ClientsId")
                        .HasConstraintName("FK__Offer__ClientsId__740F363E")
                        .IsRequired();

                    b.HasOne("YouKpiBackend.ModelsEntity.Pracownik", "OfferrerNavigation")
                        .WithMany("Offer")
                        .HasForeignKey("Offerrer")
                        .HasConstraintName("FK__Offer__Offerrer__3C69FB99");

                    b.Navigation("Clients");

                    b.Navigation("OfferrerNavigation");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.OfferLineProcess", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.OfferLines", "OfferLine")
                        .WithMany("OfferLineProcess")
                        .HasForeignKey("OfferLineId")
                        .HasConstraintName("FK__OfferLine__Offer__34E8D562")
                        .IsRequired();

                    b.HasOne("YouKpiBackend.ModelsEntity.Process", "Process")
                        .WithMany("OfferLineProcess")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK__OfferLine__Proce__30242045")
                        .IsRequired();

                    b.Navigation("OfferLine");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.OfferLines", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Offer", "Offer")
                        .WithMany("OfferLines")
                        .HasForeignKey("OfferId")
                        .HasConstraintName("FK__OfferLine__Offer__33008CF0");

                    b.HasOne("YouKpiBackend.ModelsEntity.Produkty", "Product")
                        .WithMany("OfferLines")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__OfferLine__Produ__33F4B129");

                    b.Navigation("Offer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.OfferProcess", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Offer", "Offer")
                        .WithMany("OfferProcess")
                        .HasForeignKey("OfferId")
                        .HasConstraintName("FK__OfferProc__Offer__38B96646")
                        .IsRequired();

                    b.HasOne("YouKpiBackend.ModelsEntity.Process", "Process")
                        .WithMany("OfferProcess")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK__OfferProc__Proce__39AD8A7F")
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.PracownikCzasStep", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Czesci", "Czesc")
                        .WithMany("PracownikCzasStep")
                        .HasForeignKey("CzescId")
                        .HasConstraintName("FK_PracownikCzasStep_PracownikCzasStep2");

                    b.HasOne("YouKpiBackend.ModelsEntity.Maszyny", "Maszyny")
                        .WithMany("PracownikCzasStep")
                        .HasForeignKey("MaszynyId")
                        .HasConstraintName("FK_PracownikCzasStep_Maszyny");

                    b.HasOne("YouKpiBackend.ModelsEntity.OfferLines", "OfferLines")
                        .WithMany("PracownikCzasStep")
                        .HasForeignKey("OfferLinesId")
                        .HasConstraintName("FK_PracownikCzasStep_OfferLines")
                        .IsRequired();

                    b.HasOne("YouKpiBackend.ModelsEntity.Pracownik", "Pracownik")
                        .WithMany("PracownikCzasStep")
                        .HasForeignKey("PracownikId")
                        .HasConstraintName("FK_PracownikCzasStep_Pracownik")
                        .IsRequired();

                    b.HasOne("YouKpiBackend.ModelsEntity.Process", "Process")
                        .WithMany("PracownikCzasStep")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK_PracownikCzasStep_Process")
                        .IsRequired();

                    b.Navigation("Czesc");

                    b.Navigation("Maszyny");

                    b.Navigation("OfferLines");

                    b.Navigation("Pracownik");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.PracownikProcess", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Pracownik", "Pracownik")
                        .WithMany("PracownikProcess")
                        .HasForeignKey("PracownikId")
                        .HasConstraintName("FK_PracownikProcess_Pracownik")
                        .IsRequired();

                    b.Navigation("Pracownik");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ProcessesProcess", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Process", "Process")
                        .WithMany("ProcessesProcessProcess")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK_ProcessesProcess");

                    b.HasOne("YouKpiBackend.ModelsEntity.Process", "RelatedProcess")
                        .WithMany("ProcessesProcessRelatedProcess")
                        .HasForeignKey("RelatedProcessId")
                        .HasConstraintName("FK_ProcessesRelatedProcess");

                    b.Navigation("Process");

                    b.Navigation("RelatedProcess");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ProduktCzesci", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Czesci", "Czesci")
                        .WithMany("ProduktCzesci")
                        .HasForeignKey("CzesciId")
                        .HasConstraintName("ProduktCzesci_Czesci_FK")
                        .IsRequired();

                    b.HasOne("YouKpiBackend.ModelsEntity.Produkty", "Produkt")
                        .WithMany("ProduktCzesci")
                        .HasForeignKey("ProduktId")
                        .HasConstraintName("ProduktCzesci_Produkty_FK");

                    b.Navigation("Czesci");

                    b.Navigation("Produkt");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ProduktyRysunkiInfo", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Produkty", "Produkt")
                        .WithMany("ProduktyRysunkiInfo")
                        .HasForeignKey("ProduktId");

                    b.HasOne("YouKpiBackend.ModelsEntity.ProduktyRysunki", "ProduktyRysunki")
                        .WithOne("ProduktyRysunkiInfo")
                        .HasForeignKey("YouKpiBackend.ModelsEntity.ProduktyRysunkiInfo", "ProduktyRysunkiId");

                    b.Navigation("Produkt");

                    b.Navigation("ProduktyRysunki");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.StepOfferWykonanie", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.ReasonCodes", "ReasonCode")
                        .WithMany("StepOfferWykonanie")
                        .HasForeignKey("ReasonCodeId")
                        .HasConstraintName("FK_StepOfferWykonanie_ReasonCodes");

                    b.Navigation("ReasonCode");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Steps", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Process", "Processes")
                        .WithMany("Steps")
                        .HasForeignKey("ProcessesId")
                        .HasConstraintName("FK_PROCESS_STEP_ID");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.StepsMachines", b =>
                {
                    b.HasOne("YouKpiBackend.ModelsEntity.Maszyny", "Machine")
                        .WithMany("StepsMachines")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK__StepsMach__Machi__2A6B46EF");

                    b.HasOne("YouKpiBackend.ModelsEntity.Steps", "Step")
                        .WithMany("StepsMachines")
                        .HasForeignKey("StepId")
                        .HasConstraintName("FK__StepsMach__StepI__451F3D2B");

                    b.Navigation("Machine");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Client", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Czesci", b =>
                {
                    b.Navigation("MagazynCzesci");

                    b.Navigation("PracownikCzasStep");

                    b.Navigation("ProduktCzesci");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Komponenty", b =>
                {
                    b.Navigation("Czesci");

                    b.Navigation("MagazynKomponenty");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Kontrahent", b =>
                {
                    b.Navigation("MagazynCzesci");

                    b.Navigation("MagazynKomponenty");

                    b.Navigation("MagazynProdukty");

                    b.Navigation("MagazynProduktyNiezgodne");

                    b.Navigation("MagazynTowary");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Lokacja", b =>
                {
                    b.Navigation("MagazynCzesci");

                    b.Navigation("MagazynKomponenty");

                    b.Navigation("MagazynProdukty");

                    b.Navigation("MagazynProduktyNiezgodne");

                    b.Navigation("MagazynTowary");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Maszyny", b =>
                {
                    b.Navigation("PracownikCzasStep");

                    b.Navigation("StepsMachines");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Offer", b =>
                {
                    b.Navigation("OfferLines");

                    b.Navigation("OfferProcess");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.OfferLines", b =>
                {
                    b.Navigation("OfferLineProcess");

                    b.Navigation("PracownikCzasStep");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Pracownik", b =>
                {
                    b.Navigation("Offer");

                    b.Navigation("PracownikCzasStep");

                    b.Navigation("PracownikProcess");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Process", b =>
                {
                    b.Navigation("OfferLineProcess");

                    b.Navigation("OfferProcess");

                    b.Navigation("PracownikCzasStep");

                    b.Navigation("ProcessesProcessProcess");

                    b.Navigation("ProcessesProcessRelatedProcess");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Produkty", b =>
                {
                    b.Navigation("MagazynProdukty");

                    b.Navigation("MagazynProduktyNiezgodne");

                    b.Navigation("OfferLines");

                    b.Navigation("ProduktCzesci");

                    b.Navigation("ProduktyRysunkiInfo");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ProduktyRysunki", b =>
                {
                    b.Navigation("ProduktyRysunkiInfo");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.ReasonCodes", b =>
                {
                    b.Navigation("StepOfferWykonanie");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Steps", b =>
                {
                    b.Navigation("StepsMachines");
                });

            modelBuilder.Entity("YouKpiBackend.ModelsEntity.Towary", b =>
                {
                    b.Navigation("MagazynTowary");
                });
#pragma warning restore 612, 618
        }
    }
}
